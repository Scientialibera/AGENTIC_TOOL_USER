#Requires -Version 7.0
<#
.SYNOPSIS
    Generate .env file from deployed Azure resources

.DESCRIPTION
    Discovers Azure resources in the resource group and generates a .env file
    with all necessary configuration values for the agentic framework.

.PARAMETER ResourceGroup
    The name of the resource group

.PARAMETER OutputPath
    Path to output .env file (default: repository root/.env)

.EXAMPLE
    .\generate-env.ps1 -ResourceGroup "agentic-rg"
#>

param(
    [Parameter(Mandatory=$true)]
    [string]$ResourceGroup,

    [Parameter(Mandatory=$false)]
    [string]$OutputPath
)

$ErrorActionPreference = 'Stop'

# =============================================================================
# DISCOVER RESOURCES
# =============================================================================

Write-Host ">>> Discovering Azure resources in $ResourceGroup" -ForegroundColor Cyan

# Get tenant and subscription
$context = az account show -o json | ConvertFrom-Json
$tenantId = $context.tenantId
$subscriptionId = $context.id

# Managed Identity
$identity = az identity list -g $ResourceGroup --query "[0]" -o json | ConvertFrom-Json
if ($identity) {
    $clientId = $identity.clientId
    Write-Host "  ✓ Managed Identity: $($identity.name)" -ForegroundColor Green
}

# Azure OpenAI
$openai = az cognitiveservices account list -g $ResourceGroup --query "[?kind=='OpenAI'] | [0]" -o json | ConvertFrom-Json
if ($openai) {
    $openaiEndpoint = $openai.properties.endpoint
    $openaiName = $openai.name

    # Get deployments
    $deployments = az cognitiveservices account deployment list `
        --name $openaiName `
        --resource-group $ResourceGroup `
        -o json | ConvertFrom-Json

    $chatDeployment = ($deployments | Where-Object { $_.properties.model.name -like "*gpt*" } | Select-Object -First 1).name
    $embeddingDeployment = ($deployments | Where-Object { $_.properties.model.name -like "*embedding*" } | Select-Object -First 1).name

    Write-Host "  ✓ Azure OpenAI: $openaiName" -ForegroundColor Green
}

# Cosmos DB (NoSQL)
$cosmosAccounts = az cosmosdb list -g $ResourceGroup -o json | ConvertFrom-Json
$cosmosAccount = $cosmosAccounts | Where-Object { -not ($_.capabilities | Where-Object { $_.name -eq "EnableGremlin" }) } | Select-Object -First 1
if ($cosmosAccount) {
    $cosmosEndpoint = $cosmosAccount.documentEndpoint
    Write-Host "  ✓ Cosmos DB (NoSQL): $($cosmosAccount.name)" -ForegroundColor Green
}

# Cosmos DB (Gremlin)
$gremlinAccount = $cosmosAccounts | Where-Object { $_.capabilities | Where-Object { $_.name -eq "EnableGremlin" } } | Select-Object -First 1
if ($gremlinAccount) {
    $gremlinEndpoint = "wss://$($gremlinAccount.name).gremlin.cosmos.azure.com:443/"
    Write-Host "  ✓ Cosmos DB (Gremlin): $($gremlinAccount.name)" -ForegroundColor Green
}

# Container Registry
$acr = az acr list -g $ResourceGroup --query "[0]" -o json | ConvertFrom-Json
if ($acr) {
    $acrLoginServer = $acr.loginServer
    Write-Host "  ✓ Azure Container Registry: $($acr.name)" -ForegroundColor Green
}

# Container Apps Environment
$env = az containerapp env list -g $ResourceGroup --query "[0]" -o json | ConvertFrom-Json
if ($env) {
    Write-Host "  ✓ Container Apps Environment: $($env.name)" -ForegroundColor Green
}

# =============================================================================
# GENERATE .ENV FILE
# =============================================================================

Write-Host "`n>>> Generating .env file" -ForegroundColor Cyan

if (-not $OutputPath) {
    $OutputPath = Join-Path (Split-Path (Split-Path (Split-Path $PSScriptRoot -Parent) -Parent) -Parent) ".env"
}

$envContent = @"
# =============================================================================
# AGENTIC FRAMEWORK - ENVIRONMENT CONFIGURATION
# =============================================================================
# Auto-generated by deploy/utils/generate-env.ps1
# Generated: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")

# =============================================================================
# FRAMEWORK SETTINGS
# =============================================================================
DEV_MODE=false
DEBUG=false
BYPASS_TOKEN=false
ENVIRONMENT=production
APP_NAME=Agentic Framework

# MCP Endpoints (update after deploying Container Apps)
MCP_ENDPOINTS={"graph_mcp": "http://localhost:8001/mcp", "interpreter_mcp": "http://localhost:8002/mcp", "sql_mcp": "http://localhost:8003/mcp"}

# =============================================================================
# AZURE AUTHENTICATION
# =============================================================================
AZURE_TENANT_ID=$tenantId
AZURE_CLIENT_ID=$clientId

# =============================================================================
# AZURE OPENAI CONFIGURATION
# =============================================================================
AOAI_ENDPOINT=$openaiEndpoint
AOAI_API_VERSION=2024-06-01
AOAI_CHAT_DEPLOYMENT=$chatDeployment
AOAI_EMBEDDING_DEPLOYMENT=$embeddingDeployment

# =============================================================================
# COSMOS DB CONFIGURATION (NoSQL API)
# =============================================================================
COSMOS_ENDPOINT=$cosmosEndpoint
COSMOS_DATABASE_NAME=agentic_db
COSMOS_CHAT_CONTAINER=unified_data
COSMOS_PROMPTS_CONTAINER=prompts
COSMOS_AGENT_FUNCTIONS_CONTAINER=agent_functions
COSMOS_MCP_DEFINITIONS_CONTAINER=mcp_definitions
COSMOS_RBAC_CONFIG_CONTAINER=rbac_config

# =============================================================================
# COSMOS DB CONFIGURATION (Gremlin API)
# =============================================================================
AZURE_COSMOS_GREMLIN_ENDPOINT=$gremlinEndpoint
AZURE_COSMOS_GREMLIN_PORT=443
AZURE_COSMOS_GREMLIN_DATABASE=graphdb
AZURE_COSMOS_GREMLIN_GRAPH=account_graph

# =============================================================================
# DEPLOYMENT CONFIGURATION
# =============================================================================
CONTAINER_APP_RESOURCE_GROUP=$ResourceGroup
AZURE_CONTAINER_REGISTRY=$acrLoginServer

"@

$envContent | Out-File -FilePath $OutputPath -Encoding utf8

Write-Host "  ✓ .env file generated at: $OutputPath" -ForegroundColor Green

# =============================================================================
# OUTPUT NEXT STEPS
# =============================================================================

Write-Host "`n>>> Next Steps" -ForegroundColor Yellow
Write-Host "  1. Review and customize .env file if needed"
Write-Host "  2. Run RBAC configuration:"
Write-Host "     .\deploy\security\configure-rbac.ps1 -ResourceGroup $ResourceGroup"
Write-Host "  3. Initialize Cosmos DB data:"
Write-Host "     python deploy\data\init-cosmos-data.py"
Write-Host "  4. Deploy Container Apps:"
Write-Host "     .\deploy\apps\deploy-container-apps.ps1 -ResourceGroup $ResourceGroup"
Write-Host ""
